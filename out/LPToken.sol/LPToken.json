{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINIMUM_LIQUIDITY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x608060405234801561001057600080fd5b50611b42806100206000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c8063715018a6116100b2578063a457c2d711610081578063ba9a7a5611610066578063ba9a7a5614610292578063dd62ed3e1461029b578063f2fde38b146102e157600080fd5b8063a457c2d71461026c578063a9059cbb1461027f57600080fd5b8063715018a61461022157806379cc6790146102295780638da5cb5b1461023c57806395d89b411461026457600080fd5b8063313ce5671161010957806340c10f19116100ee57806340c10f19146101c35780634cd88b76146101d857806370a08231146101eb57600080fd5b8063313ce567146101a157806339509351146101b057600080fd5b806306fdde031461013b578063095ea7b31461015957806318160ddd1461017c57806323b872dd1461018e575b600080fd5b6101436102f4565b6040516101509190611663565b60405180910390f35b61016c6101673660046116fa565b610386565b6040519015158152602001610150565b6035545b604051908152602001610150565b61016c61019c366004611724565b61039e565b60405160128152602001610150565b61016c6101be3660046116fa565b6103c2565b6101d66101d13660046116fa565b61040e565b005b61016c6101e636600461183a565b610523565b6101806101f936600461189e565b73ffffffffffffffffffffffffffffffffffffffff1660009081526033602052604090205490565b6101d66105ed565b6101d66102373660046116fa565b61067a565b60655460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610150565b61014361076f565b61016c61027a3660046116fa565b61077e565b61016c61028d3660046116fa565b61084f565b6101806103e881565b6101806102a93660046118c0565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260346020908152604080832093909416825291909152205490565b6101d66102ef36600461189e565b61085d565b606060368054610303906118f3565b80601f016020809104026020016040519081016040528092919081815260200182805461032f906118f3565b801561037c5780601f106103515761010080835404028352916020019161037c565b820191906000526020600020905b81548152906001019060200180831161035f57829003601f168201915b5050505050905090565b60003361039481858561098d565b5060019392505050565b6000336103ac858285610b40565b6103b7858585610c17565b506001949350505050565b33600081815260346020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906103949082908690610409908790611975565b61098d565b60655473ffffffffffffffffffffffffffffffffffffffff163314610494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b806000036104fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4c50546f6b656e3a2063616e6e6f74206d696e74203000000000000000000000604482015260640161048b565b6035546000036105155761051560016103e8610ed5565b61051f8282610ed5565b5050565b6000806105306001611001565b9050801561056557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b61056d61118c565b6105778484611223565b61057f6112d8565b6001915080156105e657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5092915050565b60655473ffffffffffffffffffffffffffffffffffffffff16331461066e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161048b565b6106786000611374565b565b60655473ffffffffffffffffffffffffffffffffffffffff1633146106fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161048b565b80600003610765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4c50546f6b656e3a2063616e6e6f74206275726e203000000000000000000000604482015260640161048b565b61051f82826113eb565b606060378054610303906118f3565b33600081815260346020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015610842576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161048b565b6103b7828686840361098d565b600033610394818585610c17565b60655473ffffffffffffffffffffffffffffffffffffffff1633146108de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161048b565b73ffffffffffffffffffffffffffffffffffffffff8116610981576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161048b565b61098a81611374565b50565b73ffffffffffffffffffffffffffffffffffffffff8316610a2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161048b565b73ffffffffffffffffffffffffffffffffffffffff8216610ad2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161048b565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152603460209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610c115781811015610c04576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161048b565b610c11848484840361098d565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316610cba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161048b565b73ffffffffffffffffffffffffffffffffffffffff8216610d5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161048b565b610d688383836115e4565b73ffffffffffffffffffffffffffffffffffffffff831660009081526033602052604090205481811015610e1e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161048b565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260336020526040808220858503905591851681529081208054849290610e62908490611975565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610ec891815260200190565b60405180910390a3610c11565b73ffffffffffffffffffffffffffffffffffffffff8216610f52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161048b565b610f5e600083836115e4565b8060356000828254610f709190611975565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526033602052604081208054839290610faa908490611975565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60008054610100900460ff16156110b8578160ff1660011480156110245750303b155b6110b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161048b565b506000919050565b60005460ff80841691161061114f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161048b565b50600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055600190565b919050565b600054610100900460ff16610678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161048b565b600054610100900460ff166112ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161048b565b60366112c683826119db565b5060376112d382826119db565b505050565b600054610100900460ff1661136f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161048b565b610678335b6065805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b73ffffffffffffffffffffffffffffffffffffffff821661148e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161048b565b61149a826000836115e4565b73ffffffffffffffffffffffffffffffffffffffff821660009081526033602052604090205481811015611550576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f6365000000000000000000000000000000000000000000000000000000000000606482015260840161048b565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260336020526040812083830390556035805484929061158c908490611af5565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b3073ffffffffffffffffffffffffffffffffffffffff8316036112d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4c50546f6b656e3a2063616e6e6f742073656e6420746f20697473656c660000604482015260640161048b565b600060208083528351808285015260005b8181101561169057858101830151858201604001528201611674565b818111156116a2576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461118757600080fd5b6000806040838503121561170d57600080fd5b611716836116d6565b946020939093013593505050565b60008060006060848603121561173957600080fd5b611742846116d6565b9250611750602085016116d6565b9150604084013590509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126117a057600080fd5b813567ffffffffffffffff808211156117bb576117bb611760565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561180157611801611760565b8160405283815286602085880101111561181a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561184d57600080fd5b823567ffffffffffffffff8082111561186557600080fd5b6118718683870161178f565b9350602085013591508082111561188757600080fd5b506118948582860161178f565b9150509250929050565b6000602082840312156118b057600080fd5b6118b9826116d6565b9392505050565b600080604083850312156118d357600080fd5b6118dc836116d6565b91506118ea602084016116d6565b90509250929050565b600181811c9082168061190757607f821691505b602082108103611940577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561198857611988611946565b500190565b601f8211156112d357600081815260208120601f850160051c810160208610156119b45750805b601f850160051c820191505b818110156119d3578281556001016119c0565b505050505050565b815167ffffffffffffffff8111156119f5576119f5611760565b611a0981611a0384546118f3565b8461198d565b602080601f831160018114611a5c5760008415611a265750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556119d3565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015611aa957888601518255948401946001909101908401611a8a565b5085821015611ae557878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b600082821015611b0757611b07611946565b50039056fea2646970667358221220aa0c9bb8cb4e0a5c72c96c9ec1bd22ea317f0e1d8bfe4cde9225f35d6dd88b2b64736f6c634300080f0033",
    "sourceMap": "588:2950:4:-:0;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c8063715018a6116100b2578063a457c2d711610081578063ba9a7a5611610066578063ba9a7a5614610292578063dd62ed3e1461029b578063f2fde38b146102e157600080fd5b8063a457c2d71461026c578063a9059cbb1461027f57600080fd5b8063715018a61461022157806379cc6790146102295780638da5cb5b1461023c57806395d89b411461026457600080fd5b8063313ce5671161010957806340c10f19116100ee57806340c10f19146101c35780634cd88b76146101d857806370a08231146101eb57600080fd5b8063313ce567146101a157806339509351146101b057600080fd5b806306fdde031461013b578063095ea7b31461015957806318160ddd1461017c57806323b872dd1461018e575b600080fd5b6101436102f4565b6040516101509190611663565b60405180910390f35b61016c6101673660046116fa565b610386565b6040519015158152602001610150565b6035545b604051908152602001610150565b61016c61019c366004611724565b61039e565b60405160128152602001610150565b61016c6101be3660046116fa565b6103c2565b6101d66101d13660046116fa565b61040e565b005b61016c6101e636600461183a565b610523565b6101806101f936600461189e565b73ffffffffffffffffffffffffffffffffffffffff1660009081526033602052604090205490565b6101d66105ed565b6101d66102373660046116fa565b61067a565b60655460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610150565b61014361076f565b61016c61027a3660046116fa565b61077e565b61016c61028d3660046116fa565b61084f565b6101806103e881565b6101806102a93660046118c0565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260346020908152604080832093909416825291909152205490565b6101d66102ef36600461189e565b61085d565b606060368054610303906118f3565b80601f016020809104026020016040519081016040528092919081815260200182805461032f906118f3565b801561037c5780601f106103515761010080835404028352916020019161037c565b820191906000526020600020905b81548152906001019060200180831161035f57829003601f168201915b5050505050905090565b60003361039481858561098d565b5060019392505050565b6000336103ac858285610b40565b6103b7858585610c17565b506001949350505050565b33600081815260346020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906103949082908690610409908790611975565b61098d565b60655473ffffffffffffffffffffffffffffffffffffffff163314610494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b806000036104fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4c50546f6b656e3a2063616e6e6f74206d696e74203000000000000000000000604482015260640161048b565b6035546000036105155761051560016103e8610ed5565b61051f8282610ed5565b5050565b6000806105306001611001565b9050801561056557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b61056d61118c565b6105778484611223565b61057f6112d8565b6001915080156105e657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5092915050565b60655473ffffffffffffffffffffffffffffffffffffffff16331461066e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161048b565b6106786000611374565b565b60655473ffffffffffffffffffffffffffffffffffffffff1633146106fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161048b565b80600003610765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4c50546f6b656e3a2063616e6e6f74206275726e203000000000000000000000604482015260640161048b565b61051f82826113eb565b606060378054610303906118f3565b33600081815260346020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015610842576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161048b565b6103b7828686840361098d565b600033610394818585610c17565b60655473ffffffffffffffffffffffffffffffffffffffff1633146108de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161048b565b73ffffffffffffffffffffffffffffffffffffffff8116610981576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161048b565b61098a81611374565b50565b73ffffffffffffffffffffffffffffffffffffffff8316610a2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161048b565b73ffffffffffffffffffffffffffffffffffffffff8216610ad2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161048b565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152603460209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610c115781811015610c04576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161048b565b610c11848484840361098d565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316610cba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161048b565b73ffffffffffffffffffffffffffffffffffffffff8216610d5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161048b565b610d688383836115e4565b73ffffffffffffffffffffffffffffffffffffffff831660009081526033602052604090205481811015610e1e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161048b565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260336020526040808220858503905591851681529081208054849290610e62908490611975565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610ec891815260200190565b60405180910390a3610c11565b73ffffffffffffffffffffffffffffffffffffffff8216610f52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161048b565b610f5e600083836115e4565b8060356000828254610f709190611975565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526033602052604081208054839290610faa908490611975565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60008054610100900460ff16156110b8578160ff1660011480156110245750303b155b6110b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161048b565b506000919050565b60005460ff80841691161061114f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161048b565b50600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055600190565b919050565b600054610100900460ff16610678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161048b565b600054610100900460ff166112ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161048b565b60366112c683826119db565b5060376112d382826119db565b505050565b600054610100900460ff1661136f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161048b565b610678335b6065805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b73ffffffffffffffffffffffffffffffffffffffff821661148e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161048b565b61149a826000836115e4565b73ffffffffffffffffffffffffffffffffffffffff821660009081526033602052604090205481811015611550576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f6365000000000000000000000000000000000000000000000000000000000000606482015260840161048b565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260336020526040812083830390556035805484929061158c908490611af5565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b3073ffffffffffffffffffffffffffffffffffffffff8316036112d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4c50546f6b656e3a2063616e6e6f742073656e6420746f20697473656c660000604482015260640161048b565b600060208083528351808285015260005b8181101561169057858101830151858201604001528201611674565b818111156116a2576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461118757600080fd5b6000806040838503121561170d57600080fd5b611716836116d6565b946020939093013593505050565b60008060006060848603121561173957600080fd5b611742846116d6565b9250611750602085016116d6565b9150604084013590509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126117a057600080fd5b813567ffffffffffffffff808211156117bb576117bb611760565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561180157611801611760565b8160405283815286602085880101111561181a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561184d57600080fd5b823567ffffffffffffffff8082111561186557600080fd5b6118718683870161178f565b9350602085013591508082111561188757600080fd5b506118948582860161178f565b9150509250929050565b6000602082840312156118b057600080fd5b6118b9826116d6565b9392505050565b600080604083850312156118d357600080fd5b6118dc836116d6565b91506118ea602084016116d6565b90509250929050565b600181811c9082168061190757607f821691505b602082108103611940577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561198857611988611946565b500190565b601f8211156112d357600081815260208120601f850160051c810160208610156119b45750805b601f850160051c820191505b818110156119d3578281556001016119c0565b505050505050565b815167ffffffffffffffff8111156119f5576119f5611760565b611a0981611a0384546118f3565b8461198d565b602080601f831160018114611a5c5760008415611a265750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556119d3565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015611aa957888601518255948401946001909101908401611a8a565b5085821015611ae557878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b600082821015611b0757611b07611946565b50039056fea2646970667358221220aa0c9bb8cb4e0a5c72c96c9ec1bd22ea317f0e1d8bfe4cde9225f35d6dd88b2b64736f6c634300080f0033",
    "sourceMap": "588:2950:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2493:98:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4770:197;;;;;;:::i;:::-;;:::i;:::-;;;1300:14:40;;1293:22;1275:41;;1263:2;1248:18;4770:197:20;1135:187:40;3581:106:20;3668:12;;3581:106;;;1473:25:40;;;1461:2;1446:18;3581:106:20;1327:177:40;5529:286:20;;;;;;:::i;:::-;;:::i;3430:91::-;;;3512:2;1984:36:40;;1972:2;1957:18;3430:91:20;1842:184:40;6210:234:20;;;;;;:::i;:::-;;:::i;2180:383:4:-;;;;;;:::i;:::-;;:::i;:::-;;1666:226;;;;;;:::i;:::-;;:::i;3745:125:20:-;;;;;;:::i;:::-;3845:18;;3819:7;3845:18;;;:9;:18;;;;;;;3745:125;1908:101:18;;;:::i;2805:155:4:-;;;;;;:::i;:::-;;:::i;1276:85:18:-;1348:6;;1276:85;;1348:6;;;;3888:74:40;;3876:2;3861:18;1276:85:18;3742:226:40;2704:102:20;;;:::i;6931:427::-;;;;;;:::i;:::-;;:::i;4066:189::-;;;;;;:::i;:::-;;:::i;1274:49:4:-;;1318:5;1274:49;;4313:149:20;;;;;;:::i;:::-;4428:18;;;;4402:7;4428:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4313:149;2158:198:18;;;;;;:::i;:::-;;:::i;2493:98:20:-;2547:13;2579:5;2572:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2493:98;:::o;4770:197::-;4853:4;929:10:25;4907:32:20;929:10:25;4923:7:20;4932:6;4907:8;:32::i;:::-;-1:-1:-1;4956:4:20;;4770:197;-1:-1:-1;;;4770:197:20:o;5529:286::-;5656:4;929:10:25;5712:38:20;5728:4;929:10:25;5743:6:20;5712:15;:38::i;:::-;5760:27;5770:4;5776:2;5780:6;5760:9;:27::i;:::-;-1:-1:-1;5804:4:20;;5529:286;-1:-1:-1;;;;5529:286:20:o;6210:234::-;929:10:25;6298:4:20;4428:18;;;:11;:18;;;;;;;;;:27;;;;;;;;;;6298:4;;929:10:25;6352:64:20;;929:10:25;;4428:27:20;;6377:38;;6405:10;;6377:38;:::i;:::-;6352:8;:64::i;2180:383:4:-;1348:6:18;;1488:23;1348:6;929:10:25;1488:23:18;1480:68;;;;;;;5204:2:40;1480:68:18;;;5186:21:40;;;5223:18;;;5216:30;5282:34;5262:18;;;5255:62;5334:18;;1480:68:18;;;;;;;;;2262:6:4::1;2272:1;2262:11:::0;2254:46:::1;;;::::0;::::1;::::0;;5565:2:40;2254:46:4::1;::::0;::::1;5547:21:40::0;5604:2;5584:18;;;5577:30;5643:24;5623:18;;;5616:52;5685:18;;2254:46:4::1;5363:346:40::0;2254:46:4::1;3668:12:20::0;;2327:1:4::1;2310:18:::0;2306:223:::1;;2486:36;2500:1;1318:5;2486;:36::i;:::-;2534:24;2540:9;2551:6;2534:5;:24::i;:::-;2180:383:::0;;:::o;1666:226::-;1758:4;3111:19:19;3133:25;3156:1;3133:22;:25::i;:::-;3111:47;;3172:14;3168:65;;;3202:13;:20;;;;;;;;3168:65;1770:26:4::1;:24;:26::i;:::-;1802:36;1825:4;1831:6;1802:22;:36::i;:::-;1844:26;:24;:26::i;:::-;1883:4;1876:11;;3257:14:19::0;3253:99;;;3303:5;3287:21;;;;;;3327:14;;-1:-1:-1;1984:36:40;;3327:14:19;;1972:2:40;1957:18;3327:14:19;;;;;;;3253:99;3101:257;1666:226:4;;;;:::o;1908:101:18:-;1348:6;;1488:23;1348:6;929:10:25;1488:23:18;1480:68;;;;;;;5204:2:40;1480:68:18;;;5186:21:40;;;5223:18;;;5216:30;5282:34;5262:18;;;5255:62;5334:18;;1480:68:18;5002:356:40;1480:68:18;1972:30:::1;1999:1;1972:18;:30::i;:::-;1908:101::o:0;2805:155:4:-;1348:6:18;;1488:23;1348:6;929:10:25;1488:23:18;1480:68;;;;;;;5204:2:40;1480:68:18;;;5186:21:40;;;5223:18;;;5216:30;5282:34;5262:18;;;5255:62;5334:18;;1480:68:18;5002:356:40;1480:68:18;2889:6:4::1;2899:1;2889:11:::0;2881:46:::1;;;::::0;::::1;::::0;;6115:2:40;2881:46:4::1;::::0;::::1;6097:21:40::0;6154:2;6134:18;;;6127:30;6193:24;6173:18;;;6166:52;6235:18;;2881:46:4::1;5913:346:40::0;2881:46:4::1;2933:22;2939:7;2948:6;2933:5;:22::i;2704:102:20:-:0;2760:13;2792:7;2785:14;;;;;:::i;6931:427::-;929:10:25;7024:4:20;4428:18;;;:11;:18;;;;;;;;;:27;;;;;;;;;;7024:4;;929:10:25;7168:15:20;7148:16;:35;;7140:85;;;;;;;6466:2:40;7140:85:20;;;6448:21:40;6505:2;6485:18;;;6478:30;6544:34;6524:18;;;6517:62;6615:7;6595:18;;;6588:35;6640:19;;7140:85:20;6264:401:40;7140:85:20;7259:60;7268:5;7275:7;7303:15;7284:16;:34;7259:8;:60::i;4066:189::-;4145:4;929:10:25;4199:28:20;929:10:25;4216:2:20;4220:6;4199:9;:28::i;2158:198:18:-;1348:6;;1488:23;1348:6;929:10:25;1488:23:18;1480:68;;;;;;;5204:2:40;1480:68:18;;;5186:21:40;;;5223:18;;;5216:30;5282:34;5262:18;;;5255:62;5334:18;;1480:68:18;5002:356:40;1480:68:18;2246:22:::1;::::0;::::1;2238:73;;;::::0;::::1;::::0;;6872:2:40;2238:73:18::1;::::0;::::1;6854:21:40::0;6911:2;6891:18;;;6884:30;6950:34;6930:18;;;6923:62;7021:8;7001:18;;;6994:36;7047:19;;2238:73:18::1;6670:402:40::0;2238:73:18::1;2321:28;2340:8;2321:18;:28::i;:::-;2158:198:::0;:::o;10456:370:20:-;10587:19;;;10579:68;;;;;;;7279:2:40;10579:68:20;;;7261:21:40;7318:2;7298:18;;;7291:30;7357:34;7337:18;;;7330:62;7428:6;7408:18;;;7401:34;7452:19;;10579:68:20;7077:400:40;10579:68:20;10665:21;;;10657:68;;;;;;;7684:2:40;10657:68:20;;;7666:21:40;7723:2;7703:18;;;7696:30;7762:34;7742:18;;;7735:62;7833:4;7813:18;;;7806:32;7855:19;;10657:68:20;7482:398:40;10657:68:20;10736:18;;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10787:32;;1473:25:40;;;10787:32:20;;1446:18:40;10787:32:20;;;;;;;10456:370;;;:::o;11107:441::-;4428:18;;;;11237:24;4428:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;11323:17;11303:37;;11299:243;;11384:6;11364:16;:26;;11356:68;;;;;;;8087:2:40;11356:68:20;;;8069:21:40;8126:2;8106:18;;;8099:30;8165:31;8145:18;;;8138:59;8214:18;;11356:68:20;7885:353:40;11356:68:20;11466:51;11475:5;11482:7;11510:6;11491:16;:25;11466:8;:51::i;:::-;11227:321;11107:441;;;:::o;7821:651::-;7947:18;;;7939:68;;;;;;;8445:2:40;7939:68:20;;;8427:21:40;8484:2;8464:18;;;8457:30;8523:34;8503:18;;;8496:62;8594:7;8574:18;;;8567:35;8619:19;;7939:68:20;8243:401:40;7939:68:20;8025:16;;;8017:64;;;;;;;8851:2:40;8017:64:20;;;8833:21:40;8890:2;8870:18;;;8863:30;8929:34;8909:18;;;8902:62;9000:5;8980:18;;;8973:33;9023:19;;8017:64:20;8649:399:40;8017:64:20;8092:38;8113:4;8119:2;8123:6;8092:20;:38::i;:::-;8163:15;;;8141:19;8163:15;;;:9;:15;;;;;;8196:21;;;;8188:72;;;;;;;9255:2:40;8188:72:20;;;9237:21:40;9294:2;9274:18;;;9267:30;9333:34;9313:18;;;9306:62;9404:8;9384:18;;;9377:36;9430:19;;8188:72:20;9053:402:40;8188:72:20;8294:15;;;;;;;;:9;:15;;;;;;8312:20;;;8294:38;;8352:13;;;;;;;;:23;;8326:6;;8294:15;8352:23;;8326:6;;8352:23;:::i;:::-;;;;;;;;8406:2;8391:26;;8400:4;8391:26;;;8410:6;8391:26;;;;1473:25:40;;1461:2;1446:18;;1327:177;8391:26:20;;;;;;;;8428:37;2269:159;8748:389;8831:21;;;8823:65;;;;;;;9662:2:40;8823:65:20;;;9644:21:40;9701:2;9681:18;;;9674:30;9740:33;9720:18;;;9713:61;9791:18;;8823:65:20;9460:355:40;8823:65:20;8899:49;8928:1;8932:7;8941:6;8899:20;:49::i;:::-;8975:6;8959:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;8991:18:20;;;;;;;:9;:18;;;;;:28;;9013:6;;8991:18;:28;;9013:6;;8991:28;:::i;:::-;;;;-1:-1:-1;;9034:37:20;;1473:25:40;;;9034:37:20;;;;9051:1;;9034:37;;1461:2:40;1446:18;9034:37:20;;;;;;;2180:383:4;;:::o;5287:808:19:-;5351:4;5684:13;;;;;;;5680:409;;;5738:7;:12;;5749:1;5738:12;:61;;;;-1:-1:-1;5793:4:19;1476:19:24;:23;5738:61:19;5713:166;;;;;;;10022:2:40;5713:166:19;;;10004:21:40;10061:2;10041:18;;;10034:30;10100:34;10080:18;;;10073:62;10171:16;10151:18;;;10144:44;10205:19;;5713:166:19;9820:410:40;5713:166:19;-1:-1:-1;5900:5:19;;5287:808;-1:-1:-1;5287:808:19:o;5680:409::-;5944:12;;:22;;;;:12;;:22;5936:81;;;;;;;10022:2:40;5936:81:19;;;10004:21:40;10061:2;10041:18;;;10034:30;10100:34;10080:18;;;10073:62;10171:16;10151:18;;;10144:44;10205:19;;5936:81:19;9820:410:40;5936:81:19;-1:-1:-1;6031:12:19;:22;;;;;;;;;;;;;;;-1:-1:-1;;5287:808:19:o;5680:409::-;5287:808;;;:::o;776:69:25:-;4698:13:19;;;;;;;4690:69;;;;;;;10437:2:40;4690:69:19;;;10419:21:40;10476:2;10456:18;;;10449:30;10515:34;10495:18;;;10488:62;10586:13;10566:18;;;10559:41;10617:19;;4690:69:19;10235:407:40;2269:159:20;4698:13:19;;;;;;;4690:69;;;;;;;10437:2:40;4690:69:19;;;10419:21:40;10476:2;10456:18;;;10449:30;10515:34;10495:18;;;10488:62;10586:13;10566:18;;;10559:41;10617:19;;4690:69:19;10235:407:40;4690:69:19;2381:5:20::1;:13;2389:5:::0;2381;:13:::1;:::i;:::-;-1:-1:-1::0;2404:7:20::1;:17;2414:7:::0;2404;:17:::1;:::i;:::-;;2269:159:::0;;:::o;1089:111:18:-;4698:13:19;;;;;;;4690:69;;;;;;;10437:2:40;4690:69:19;;;10419:21:40;10476:2;10456:18;;;10449:30;10515:34;10495:18;;;10488:62;10586:13;10566:18;;;10559:41;10617:19;;4690:69:19;10235:407:40;4690:69:19;1161:32:18::1;929:10:25::0;1180:12:18::1;2602:6:::0;;;;2618:17;;;;;;;;;;;2650:40;;2602:6;;;2618:17;2602:6;;2650:40;;2583:16;;2650:40;2573:124;2510:187;:::o;9457:576:20:-;9540:21;;;9532:67;;;;;;;13232:2:40;9532:67:20;;;13214:21:40;13271:2;13251:18;;;13244:30;13310:34;13290:18;;;13283:62;13381:3;13361:18;;;13354:31;13402:19;;9532:67:20;13030:397:40;9532:67:20;9610:49;9631:7;9648:1;9652:6;9610:20;:49::i;:::-;9695:18;;;9670:22;9695:18;;;:9;:18;;;;;;9731:24;;;;9723:71;;;;;;;13634:2:40;9723:71:20;;;13616:21:40;13673:2;13653:18;;;13646:30;13712:34;13692:18;;;13685:62;13783:4;13763:18;;;13756:32;13805:19;;9723:71:20;13432:398:40;9723:71:20;9828:18;;;;;;;:9;:18;;;;;9849:23;;;9828:44;;9892:12;:22;;9866:6;;9828:18;9892:22;;9866:6;;9892:22;:::i;:::-;;;;-1:-1:-1;;9930:37:20;;1473:25:40;;;9956:1:20;;9930:37;;;;;;1461:2:40;1446:18;9930:37:20;;;;;;;2404:17:::1;2269:159:::0;;:::o;3281:255:4:-;3491:4;3477:19;;;;3469:62;;;;;;;14167:2:40;3469:62:4;;;14149:21:40;14206:2;14186:18;;;14179:30;14245:32;14225:18;;;14218:60;14295:18;;3469:62:4;13965:354:40;14:656;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;452:6;449:1;446:13;443:91;;;522:1;517:2;508:6;497:9;493:22;489:31;482:42;443:91;-1:-1:-1;586:2:40;574:15;591:66;570:88;555:104;;;;661:2;551:113;;14:656;-1:-1:-1;;;14:656:40:o;675:196::-;743:20;;803:42;792:54;;782:65;;772:93;;861:1;858;851:12;876:254;944:6;952;1005:2;993:9;984:7;980:23;976:32;973:52;;;1021:1;1018;1011:12;973:52;1044:29;1063:9;1044:29;:::i;:::-;1034:39;1120:2;1105:18;;;;1092:32;;-1:-1:-1;;;876:254:40:o;1509:328::-;1586:6;1594;1602;1655:2;1643:9;1634:7;1630:23;1626:32;1623:52;;;1671:1;1668;1661:12;1623:52;1694:29;1713:9;1694:29;:::i;:::-;1684:39;;1742:38;1776:2;1765:9;1761:18;1742:38;:::i;:::-;1732:48;;1827:2;1816:9;1812:18;1799:32;1789:42;;1509:328;;;;;:::o;2031:184::-;2083:77;2080:1;2073:88;2180:4;2177:1;2170:15;2204:4;2201:1;2194:15;2220:778;2263:5;2316:3;2309:4;2301:6;2297:17;2293:27;2283:55;;2334:1;2331;2324:12;2283:55;2370:6;2357:20;2396:18;2433:2;2429;2426:10;2423:36;;;2439:18;;:::i;:::-;2573:2;2567:9;2635:4;2627:13;;2478:66;2623:22;;;2647:2;2619:31;2615:40;2603:53;;;2671:18;;;2691:22;;;2668:46;2665:72;;;2717:18;;:::i;:::-;2757:10;2753:2;2746:22;2792:2;2784:6;2777:18;2838:3;2831:4;2826:2;2818:6;2814:15;2810:26;2807:35;2804:55;;;2855:1;2852;2845:12;2804:55;2919:2;2912:4;2904:6;2900:17;2893:4;2885:6;2881:17;2868:54;2966:1;2959:4;2954:2;2946:6;2942:15;2938:26;2931:37;2986:6;2977:15;;;;;;2220:778;;;;:::o;3003:543::-;3091:6;3099;3152:2;3140:9;3131:7;3127:23;3123:32;3120:52;;;3168:1;3165;3158:12;3120:52;3208:9;3195:23;3237:18;3278:2;3270:6;3267:14;3264:34;;;3294:1;3291;3284:12;3264:34;3317:50;3359:7;3350:6;3339:9;3335:22;3317:50;:::i;:::-;3307:60;;3420:2;3409:9;3405:18;3392:32;3376:48;;3449:2;3439:8;3436:16;3433:36;;;3465:1;3462;3455:12;3433:36;;3488:52;3532:7;3521:8;3510:9;3506:24;3488:52;:::i;:::-;3478:62;;;3003:543;;;;;:::o;3551:186::-;3610:6;3663:2;3651:9;3642:7;3638:23;3634:32;3631:52;;;3679:1;3676;3669:12;3631:52;3702:29;3721:9;3702:29;:::i;:::-;3692:39;3551:186;-1:-1:-1;;;3551:186:40:o;3973:260::-;4041:6;4049;4102:2;4090:9;4081:7;4077:23;4073:32;4070:52;;;4118:1;4115;4108:12;4070:52;4141:29;4160:9;4141:29;:::i;:::-;4131:39;;4189:38;4223:2;4212:9;4208:18;4189:38;:::i;:::-;4179:48;;3973:260;;;;;:::o;4238:437::-;4317:1;4313:12;;;;4360;;;4381:61;;4435:4;4427:6;4423:17;4413:27;;4381:61;4488:2;4480:6;4477:14;4457:18;4454:38;4451:218;;4525:77;4522:1;4515:88;4626:4;4623:1;4616:15;4654:4;4651:1;4644:15;4451:218;;4238:437;;;:::o;4680:184::-;4732:77;4729:1;4722:88;4829:4;4826:1;4819:15;4853:4;4850:1;4843:15;4869:128;4909:3;4940:1;4936:6;4933:1;4930:13;4927:39;;;4946:18;;:::i;:::-;-1:-1:-1;4982:9:40;;4869:128::o;10773:545::-;10875:2;10870:3;10867:11;10864:448;;;10911:1;10936:5;10932:2;10925:17;10981:4;10977:2;10967:19;11051:2;11039:10;11035:19;11032:1;11028:27;11022:4;11018:38;11087:4;11075:10;11072:20;11069:47;;;-1:-1:-1;11110:4:40;11069:47;11165:2;11160:3;11156:12;11153:1;11149:20;11143:4;11139:31;11129:41;;11220:82;11238:2;11231:5;11228:13;11220:82;;;11283:17;;;11264:1;11253:13;11220:82;;;11224:3;;;10773:545;;;:::o;11554:1471::-;11680:3;11674:10;11707:18;11699:6;11696:30;11693:56;;;11729:18;;:::i;:::-;11758:97;11848:6;11808:38;11840:4;11834:11;11808:38;:::i;:::-;11802:4;11758:97;:::i;:::-;11910:4;;11974:2;11963:14;;11991:1;11986:782;;;;12812:1;12829:6;12826:89;;;-1:-1:-1;12881:19:40;;;12875:26;12826:89;11460:66;11451:1;11447:11;;;11443:84;11439:89;11429:100;11535:1;11531:11;;;11426:117;12928:81;;11956:1063;;11986:782;10720:1;10713:14;;;10757:4;10744:18;;12034:66;12022:79;;;12199:236;12213:7;12210:1;12207:14;12199:236;;;12302:19;;;12296:26;12281:42;;12394:27;;;;12362:1;12350:14;;;;12229:19;;12199:236;;;12203:3;12463:6;12454:7;12451:19;12448:261;;;12524:19;;;12518:26;12625:66;12607:1;12603:14;;;12619:3;12599:24;12595:97;12591:102;12576:118;12561:134;;12448:261;-1:-1:-1;;;;;12755:1:40;12739:14;;;12735:22;12722:36;;-1:-1:-1;11554:1471:40:o;13835:125::-;13875:4;13903:1;13900;13897:8;13894:34;;;13908:18;;:::i;:::-;-1:-1:-1;13945:9:40;;13835:125::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "MINIMUM_LIQUIDITY()": "ba9a7a56",
    "allowance(address,address)": "dd62ed3e",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "burnFrom(address,uint256)": "79cc6790",
    "decimals()": "313ce567",
    "decreaseAllowance(address,uint256)": "a457c2d7",
    "increaseAllowance(address,uint256)": "39509351",
    "initialize(string,string)": "4cd88b76",
    "mint(address,uint256)": "40c10f19",
    "name()": "06fdde03",
    "owner()": "8da5cb5b",
    "renounceOwnership()": "715018a6",
    "symbol()": "95d89b41",
    "totalSupply()": "18160ddd",
    "transfer(address,uint256)": "a9059cbb",
    "transferFrom(address,address,uint256)": "23b872dd",
    "transferOwnership(address)": "f2fde38b"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Only Swap contracts should initialize and own LPToken contracts.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burnFrom(address,uint256)\":{\"details\":\"only owner can call this burn function\",\"params\":{\"account\":\"address of account from which to burn token\",\"amount\":\"amount of tokens to mint\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize(string,string)\":{\"details\":\"The caller of this function will become the owner. A Swap contract should call this in its initializer function.\",\"params\":{\"name\":\"name of this token\",\"symbol\":\"symbol of this token\"}},\"mint(address,uint256)\":{\"details\":\"only owner can call this mint function\",\"params\":{\"amount\":\"amount of tokens to mint\",\"recipient\":\"address of account to receive the tokens\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"MINIMUM_LIQUIDITY\":{\"details\":\"If this is the first mint of the LP token, this amount of funds are burned. See audit recommendations here: - https://github.com/code-423n4/2022-03-prepo-findings/issues/27 - https://github.com/code-423n4/2022-04-jpegd-findings/issues/12 and uniswap v2 implementation here: https://github.com/Uniswap/v2-core/blob/8b82b04a0b9e696c0e83f8b2f00e5d7be6888c79/contracts/UniswapV2Pair.sol#L15\"}},\"title\":\"Liquidity Provider Token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MINIMUM_LIQUIDITY()\":{\"notice\":\"Used to enforce proper token dilution\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burns the given amount of LPToken from provided account\"},\"initialize(string,string)\":{\"notice\":\"Initializes this LPToken contract with the given name and symbol\"},\"mint(address,uint256)\":{\"notice\":\"Mints the given amount of LPToken to the recipient.\"}},\"notice\":\"This token is an ERC20 detailed token with added capability to be minted by the owner. It is used to represent user's shares when providing liquidity to swap contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/nxtp/packages/deployments/contracts/contracts/core/connext/helpers/LPToken.sol\":\"LPToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[\":@aave/=lib/aave-v3-core/\",\":@chainlink/=lib/cellar-contracts/lib/chainlink/\",\":@clones/=lib/clones-with-immutable-args/src/\",\":@connext/nxtp-contracts/contracts/=lib/nxtp/packages/deployments/contracts/contracts/\",\":@ds-test/=lib/cellar-contracts/lib/forge-std/lib/ds-test/src/\",\":@ds/=lib/ds-test/src/\",\":@forge-std/=lib/cellar-contracts/lib/forge-std/src/\",\":@hardhat/=lib/hardhat/\",\":@openzeppelin/contracts-upgradeable/=lib/nxtp/packages/deployments/contracts/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@solmate/=lib/cellar-contracts/lib/solmate/src/\",\":@solmate/=lib/solmate/src/\",\":@std/=lib/forge-std/src/\",\":@uniswap/v3-core/=lib/cellar-contracts/lib/v3-core/\",\":@uniswap/v3-periphery/=lib/cellar-contracts/lib/v3-periphery/\",\":@uniswapV3C/=lib/cellar-contracts/lib/v3-core.git/contracts/\",\":@uniswapV3P/=lib/cellar-contracts/lib/v3-periphery.git/contracts/\",\":cellar-contracts/=lib/cellar-contracts/src/\",\":cellar/=lib/cellar-contracts/\",\":chainlink/=lib/cellar-contracts/lib/chainlink/contracts/src/v0.8/dev/vendor/@arbitrum/nitro-contracts/src/\",\":ds-test/=lib/solmate/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":nxtp/=lib/nxtp/packages/deployments/contracts/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":solmate/=lib/solmate/src/\",\":v3-core.git/=lib/cellar-contracts/lib/v3-core.git/contracts/\",\":v3-periphery.git/=lib/cellar-contracts/lib/v3-periphery.git/contracts/\"]},\"sources\":{\"lib/nxtp/packages/deployments/contracts/contracts/core/connext/helpers/LPToken.sol\":{\"keccak256\":\"0x1d3f871488111c70a6f9b09ad3baeb21ebc635c82aa2c6d627d07e09720e4126\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://e34efd00dc540ed730716f5515c5a60f75412e0e5a93e0fa39e42b9250866420\",\"dweb:/ipfs/QmQMMzZ6Wqm7wMAL9DUavmLP7QfhAZWS9q7fh1kDBgX5T2\"]},\"lib/nxtp/packages/deployments/contracts/lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://98c7bba29bcab7240cdaada7dd7cbe3529fec83314801270c46239e72a9e84d7\",\"dweb:/ipfs/QmfHCc1KMygjXchXVwafWTkFjhbb2SQ3Cu5GzRTdV4CCCh\"]},\"lib/nxtp/packages/deployments/contracts/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xb5239b505e918cb7427b939ff15da7bf7c4bb68ccb109caef246a3f58b19ba5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e5f2ea070e870eea699ee433245459f08020a4752df4f5d391de87a529fc2bad\",\"dweb:/ipfs/QmWUcKCKzqQtB6sfJHxGzNj7QRogPmUsW3QQZPAcD3kLSB\"]},\"lib/nxtp/packages/deployments/contracts/lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0x961c8b0ecb2ffd9a29010c55288cb5499afa82a620520babd568aeb89d879814\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c91de771a4fe326a9bbddde63f83c50a70aea22ebc68d075b360a53bf7361d2e\",\"dweb:/ipfs/QmYyDu8X7uzeLXiY9aViz7X94qLAn8cq6RcdTsu1chXCaW\"]},\"lib/nxtp/packages/deployments/contracts/lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0xce8be5db5e3c4efaef7677186cb624991695a59c2e9c5d2361344514423fb9cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://19b795af0e8299a0568873e70362cba35c16acf53d163707b010d099b6d0e10c\",\"dweb:/ipfs/QmaNouPTAYYMiQeFGvBUAroDNntJqFNbzpD7oANWYMC21H\"]},\"lib/nxtp/packages/deployments/contracts/lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3483370aa549810a946ace621a225616bb6d0b9ed22c3a99bbcf80dc4866ec39\",\"dweb:/ipfs/QmdgFnm6X2oQ574eJFLghVXVckwyC3SbiAUxXs934N1qvf\"]},\"lib/nxtp/packages/deployments/contracts/lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"lib/nxtp/packages/deployments/contracts/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]},\"lib/nxtp/packages/deployments/contracts/lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "version",
              "type": "uint8",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "MINIMUM_LIQUIDITY",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burnFrom"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "subtractedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "decreaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "addedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "increaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "mint"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceOwnership"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "burnFrom(address,uint256)": {
            "details": "only owner can call this burn function",
            "params": {
              "account": "address of account from which to burn token",
              "amount": "amount of tokens to mint"
            }
          },
          "decimals()": {
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
          },
          "decreaseAllowance(address,uint256)": {
            "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
          },
          "increaseAllowance(address,uint256)": {
            "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
          },
          "initialize(string,string)": {
            "details": "The caller of this function will become the owner. A Swap contract should call this in its initializer function.",
            "params": {
              "name": "name of this token",
              "symbol": "symbol of this token"
            }
          },
          "mint(address,uint256)": {
            "details": "only owner can call this mint function",
            "params": {
              "amount": "amount of tokens to mint",
              "recipient": "address of account to receive the tokens"
            }
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "MINIMUM_LIQUIDITY()": {
            "notice": "Used to enforce proper token dilution"
          },
          "burnFrom(address,uint256)": {
            "notice": "Burns the given amount of LPToken from provided account"
          },
          "initialize(string,string)": {
            "notice": "Initializes this LPToken contract with the given name and symbol"
          },
          "mint(address,uint256)": {
            "notice": "Mints the given amount of LPToken to the recipient."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@aave/=lib/aave-v3-core/",
        ":@chainlink/=lib/cellar-contracts/lib/chainlink/",
        ":@clones/=lib/clones-with-immutable-args/src/",
        ":@connext/nxtp-contracts/contracts/=lib/nxtp/packages/deployments/contracts/contracts/",
        ":@ds-test/=lib/cellar-contracts/lib/forge-std/lib/ds-test/src/",
        ":@ds/=lib/ds-test/src/",
        ":@forge-std/=lib/cellar-contracts/lib/forge-std/src/",
        ":@hardhat/=lib/hardhat/",
        ":@openzeppelin/contracts-upgradeable/=lib/nxtp/packages/deployments/contracts/lib/openzeppelin-contracts-upgradeable/contracts/",
        ":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        ":@solmate/=lib/cellar-contracts/lib/solmate/src/",
        ":@solmate/=lib/solmate/src/",
        ":@std/=lib/forge-std/src/",
        ":@uniswap/v3-core/=lib/cellar-contracts/lib/v3-core/",
        ":@uniswap/v3-periphery/=lib/cellar-contracts/lib/v3-periphery/",
        ":@uniswapV3C/=lib/cellar-contracts/lib/v3-core.git/contracts/",
        ":@uniswapV3P/=lib/cellar-contracts/lib/v3-periphery.git/contracts/",
        ":cellar-contracts/=lib/cellar-contracts/src/",
        ":cellar/=lib/cellar-contracts/",
        ":chainlink/=lib/cellar-contracts/lib/chainlink/contracts/src/v0.8/dev/vendor/@arbitrum/nitro-contracts/src/",
        ":ds-test/=lib/solmate/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":nxtp/=lib/nxtp/packages/deployments/contracts/contracts/",
        ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
        ":solmate/=lib/solmate/src/",
        ":v3-core.git/=lib/cellar-contracts/lib/v3-core.git/contracts/",
        ":v3-periphery.git/=lib/cellar-contracts/lib/v3-periphery.git/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20000
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "lib/nxtp/packages/deployments/contracts/contracts/core/connext/helpers/LPToken.sol": "LPToken"
      },
      "libraries": {}
    },
    "sources": {
      "lib/nxtp/packages/deployments/contracts/contracts/core/connext/helpers/LPToken.sol": {
        "keccak256": "0x1d3f871488111c70a6f9b09ad3baeb21ebc635c82aa2c6d627d07e09720e4126",
        "urls": [
          "bzz-raw://e34efd00dc540ed730716f5515c5a60f75412e0e5a93e0fa39e42b9250866420",
          "dweb:/ipfs/QmQMMzZ6Wqm7wMAL9DUavmLP7QfhAZWS9q7fh1kDBgX5T2"
        ],
        "license": "UNLICENSED"
      },
      "lib/nxtp/packages/deployments/contracts/lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
        "keccak256": "0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34",
        "urls": [
          "bzz-raw://98c7bba29bcab7240cdaada7dd7cbe3529fec83314801270c46239e72a9e84d7",
          "dweb:/ipfs/QmfHCc1KMygjXchXVwafWTkFjhbb2SQ3Cu5GzRTdV4CCCh"
        ],
        "license": "MIT"
      },
      "lib/nxtp/packages/deployments/contracts/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
        "keccak256": "0xb5239b505e918cb7427b939ff15da7bf7c4bb68ccb109caef246a3f58b19ba5e",
        "urls": [
          "bzz-raw://e5f2ea070e870eea699ee433245459f08020a4752df4f5d391de87a529fc2bad",
          "dweb:/ipfs/QmWUcKCKzqQtB6sfJHxGzNj7QRogPmUsW3QQZPAcD3kLSB"
        ],
        "license": "MIT"
      },
      "lib/nxtp/packages/deployments/contracts/lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol": {
        "keccak256": "0x961c8b0ecb2ffd9a29010c55288cb5499afa82a620520babd568aeb89d879814",
        "urls": [
          "bzz-raw://c91de771a4fe326a9bbddde63f83c50a70aea22ebc68d075b360a53bf7361d2e",
          "dweb:/ipfs/QmYyDu8X7uzeLXiY9aViz7X94qLAn8cq6RcdTsu1chXCaW"
        ],
        "license": "MIT"
      },
      "lib/nxtp/packages/deployments/contracts/lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol": {
        "keccak256": "0xce8be5db5e3c4efaef7677186cb624991695a59c2e9c5d2361344514423fb9cf",
        "urls": [
          "bzz-raw://19b795af0e8299a0568873e70362cba35c16acf53d163707b010d099b6d0e10c",
          "dweb:/ipfs/QmaNouPTAYYMiQeFGvBUAroDNntJqFNbzpD7oANWYMC21H"
        ],
        "license": "MIT"
      },
      "lib/nxtp/packages/deployments/contracts/lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
        "keccak256": "0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2",
        "urls": [
          "bzz-raw://3483370aa549810a946ace621a225616bb6d0b9ed22c3a99bbcf80dc4866ec39",
          "dweb:/ipfs/QmdgFnm6X2oQ574eJFLghVXVckwyC3SbiAUxXs934N1qvf"
        ],
        "license": "MIT"
      },
      "lib/nxtp/packages/deployments/contracts/lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
        "keccak256": "0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb",
        "urls": [
          "bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d",
          "dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ"
        ],
        "license": "MIT"
      },
      "lib/nxtp/packages/deployments/contracts/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
        "keccak256": "0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d",
        "urls": [
          "bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f",
          "dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4"
        ],
        "license": "MIT"
      },
      "lib/nxtp/packages/deployments/contracts/lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
        "keccak256": "0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149",
        "urls": [
          "bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c",
          "dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "lib/nxtp/packages/deployments/contracts/contracts/core/connext/helpers/LPToken.sol",
    "id": 17132,
    "exportedSymbols": {
      "ERC20Upgradeable": [
        26141
      ],
      "LPToken": [
        17131
      ],
      "OwnableUpgradeable": [
        25388
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:3500:4",
    "nodes": [
      {
        "id": 16994,
        "nodeType": "PragmaDirective",
        "src": "39:23:4",
        "literals": [
          "solidity",
          "0.8",
          ".15"
        ]
      },
      {
        "id": 16996,
        "nodeType": "ImportDirective",
        "src": "64:121:4",
        "absolutePath": "lib/nxtp/packages/deployments/contracts/lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
        "file": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 17132,
        "sourceUnit": 26284,
        "symbolAliases": [
          {
            "foreign": {
              "id": 16995,
              "name": "ERC20Upgradeable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 26141,
              "src": "72:16:4",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 16998,
        "nodeType": "ImportDirective",
        "src": "186:101:4",
        "absolutePath": "lib/nxtp/packages/deployments/contracts/lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol",
        "file": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 17132,
        "sourceUnit": 25389,
        "symbolAliases": [
          {
            "foreign": {
              "id": 16997,
              "name": "OwnableUpgradeable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 25388,
              "src": "194:18:4",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 17131,
        "nodeType": "ContractDefinition",
        "src": "588:2950:4",
        "nodes": [
          {
            "id": 17007,
            "nodeType": "VariableDeclaration",
            "src": "693:25:4",
            "constant": false,
            "mutability": "mutable",
            "name": "__GAP",
            "nameLocation": "713:5:4",
            "scope": 17131,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$49_storage",
              "typeString": "uint256[49]"
            },
            "typeName": {
              "baseType": {
                "id": 17004,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "693:7:4",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 17006,
              "length": {
                "hexValue": "3439",
                "id": 17005,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "701:2:4",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_49_by_1",
                  "typeString": "int_const 49"
                },
                "value": "49"
              },
              "nodeType": "ArrayTypeName",
              "src": "693:11:4",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
                "typeString": "uint256[49]"
              }
            },
            "visibility": "private"
          },
          {
            "id": 17013,
            "nodeType": "VariableDeclaration",
            "src": "1274:49:4",
            "constant": true,
            "documentation": {
              "id": 17008,
              "nodeType": "StructuredDocumentation",
              "src": "789:482:4",
              "text": " @notice Used to enforce proper token dilution\n @dev If this is the first mint of the LP token, this amount of funds are burned.\n See audit recommendations here:\n - https://github.com/code-423n4/2022-03-prepo-findings/issues/27\n - https://github.com/code-423n4/2022-04-jpegd-findings/issues/12\n and uniswap v2 implementation here:\n https://github.com/Uniswap/v2-core/blob/8b82b04a0b9e696c0e83f8b2f00e5d7be6888c79/contracts/UniswapV2Pair.sol#L15"
            },
            "functionSelector": "ba9a7a56",
            "mutability": "constant",
            "name": "MINIMUM_LIQUIDITY",
            "nameLocation": "1298:17:4",
            "scope": 17131,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 17009,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1274:7:4",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "commonType": {
                "typeIdentifier": "t_rational_1000_by_1",
                "typeString": "int_const 1000"
              },
              "id": 17012,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "lValueRequested": false,
              "leftExpression": {
                "hexValue": "3130",
                "id": 17010,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1318:2:4",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_10_by_1",
                  "typeString": "int_const 10"
                },
                "value": "10"
              },
              "nodeType": "BinaryOperation",
              "operator": "**",
              "rightExpression": {
                "hexValue": "33",
                "id": 17011,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1322:1:4",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_3_by_1",
                  "typeString": "int_const 3"
                },
                "value": "3"
              },
              "src": "1318:5:4",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1000_by_1",
                "typeString": "int_const 1000"
              }
            },
            "visibility": "public"
          },
          {
            "id": 17039,
            "nodeType": "FunctionDefinition",
            "src": "1666:226:4",
            "body": {
              "id": 17038,
              "nodeType": "Block",
              "src": "1764:128:4",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 17025,
                      "name": "__Context_init_unchained",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26569,
                      "src": "1770:24:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 17026,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1770:26:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 17027,
                  "nodeType": "ExpressionStatement",
                  "src": "1770:26:4"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 17029,
                        "name": "name",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 17016,
                        "src": "1825:4:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "id": 17030,
                        "name": "symbol",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 17018,
                        "src": "1831:6:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 17028,
                      "name": "__ERC20_init_unchained",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25595,
                      "src": "1802:22:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory,string memory)"
                      }
                    },
                    "id": 17031,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1802:36:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 17032,
                  "nodeType": "ExpressionStatement",
                  "src": "1802:36:4"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 17033,
                      "name": "__Ownable_init_unchained",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25302,
                      "src": "1844:24:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 17034,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1844:26:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 17035,
                  "nodeType": "ExpressionStatement",
                  "src": "1844:26:4"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 17036,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1883:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 17024,
                  "id": 17037,
                  "nodeType": "Return",
                  "src": "1876:11:4"
                }
              ]
            },
            "documentation": {
              "id": 17014,
              "nodeType": "StructuredDocumentation",
              "src": "1372:291:4",
              "text": " @notice Initializes this LPToken contract with the given name and symbol\n @dev The caller of this function will become the owner. A Swap contract should call this\n in its initializer function.\n @param name name of this token\n @param symbol symbol of this token"
            },
            "functionSelector": "4cd88b76",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 17021,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 17020,
                  "name": "initializer",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 25432,
                  "src": "1737:11:4"
                },
                "nodeType": "ModifierInvocation",
                "src": "1737:11:4"
              }
            ],
            "name": "initialize",
            "nameLocation": "1675:10:4",
            "parameters": {
              "id": 17019,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 17016,
                  "mutability": "mutable",
                  "name": "name",
                  "nameLocation": "1700:4:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 17039,
                  "src": "1686:18:4",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 17015,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1686:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 17018,
                  "mutability": "mutable",
                  "name": "symbol",
                  "nameLocation": "1720:6:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 17039,
                  "src": "1706:20:4",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 17017,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1706:6:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1685:42:4"
            },
            "returnParameters": {
              "id": 17024,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 17023,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 17039,
                  "src": "1758:4:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 17022,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1758:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1757:6:4"
            },
            "scope": 17131,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 17076,
            "nodeType": "FunctionDefinition",
            "src": "2180:383:4",
            "body": {
              "id": 17075,
              "nodeType": "Block",
              "src": "2248:315:4",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 17052,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 17050,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 17044,
                          "src": "2262:6:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 17051,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2272:1:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "2262:11:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4c50546f6b656e3a2063616e6e6f74206d696e742030",
                        "id": 17053,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2275:24:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ed34f82a9e5f1c19797c90dabe69af55fd60996fe9929040c5fdcf768caac1bc",
                          "typeString": "literal_string \"LPToken: cannot mint 0\""
                        },
                        "value": "LPToken: cannot mint 0"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ed34f82a9e5f1c19797c90dabe69af55fd60996fe9929040c5fdcf768caac1bc",
                          "typeString": "literal_string \"LPToken: cannot mint 0\""
                        }
                      ],
                      "id": 17049,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2254:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 17054,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2254:46:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 17055,
                  "nodeType": "ExpressionStatement",
                  "src": "2254:46:4"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 17059,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 17056,
                        "name": "totalSupply",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25635,
                        "src": "2310:11:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                          "typeString": "function () view returns (uint256)"
                        }
                      },
                      "id": 17057,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2310:13:4",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 17058,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2327:1:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "2310:18:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 17069,
                  "nodeType": "IfStatement",
                  "src": "2306:223:4",
                  "trueBody": {
                    "id": 17068,
                    "nodeType": "Block",
                    "src": "2330:199:4",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "31",
                                  "id": 17063,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2500:1:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  }
                                ],
                                "id": 17062,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "2492:7:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 17061,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2492:7:4",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 17064,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2492:10:4",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 17065,
                              "name": "MINIMUM_LIQUIDITY",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 17013,
                              "src": "2504:17:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 17060,
                            "name": "_mint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 25953,
                            "src": "2486:5:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 17066,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2486:36:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 17067,
                        "nodeType": "ExpressionStatement",
                        "src": "2486:36:4"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 17071,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 17042,
                        "src": "2540:9:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 17072,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 17044,
                        "src": "2551:6:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 17070,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25953,
                      "src": "2534:5:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 17073,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2534:24:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 17074,
                  "nodeType": "ExpressionStatement",
                  "src": "2534:24:4"
                }
              ]
            },
            "documentation": {
              "id": 17040,
              "nodeType": "StructuredDocumentation",
              "src": "1947:230:4",
              "text": " @notice Mints the given amount of LPToken to the recipient.\n @dev only owner can call this mint function\n @param recipient address of account to receive the tokens\n @param amount amount of tokens to mint"
            },
            "functionSelector": "40c10f19",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 17047,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 17046,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 25325,
                  "src": "2238:9:4"
                },
                "nodeType": "ModifierInvocation",
                "src": "2238:9:4"
              }
            ],
            "name": "mint",
            "nameLocation": "2189:4:4",
            "parameters": {
              "id": 17045,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 17042,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "2202:9:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 17076,
                  "src": "2194:17:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 17041,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2194:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 17044,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2221:6:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 17076,
                  "src": "2213:14:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 17043,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2213:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2193:35:4"
            },
            "returnParameters": {
              "id": 17048,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2248:0:4"
            },
            "scope": 17131,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 17099,
            "nodeType": "FunctionDefinition",
            "src": "2805:155:4",
            "body": {
              "id": 17098,
              "nodeType": "Block",
              "src": "2875:85:4",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 17089,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 17087,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 17081,
                          "src": "2889:6:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 17088,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2899:1:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "2889:11:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4c50546f6b656e3a2063616e6e6f74206275726e2030",
                        "id": 17090,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2902:24:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_746dbb314e07631883e9c2af6082a34934cdebb65c5ce78cbe0a4a2355827918",
                          "typeString": "literal_string \"LPToken: cannot burn 0\""
                        },
                        "value": "LPToken: cannot burn 0"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_746dbb314e07631883e9c2af6082a34934cdebb65c5ce78cbe0a4a2355827918",
                          "typeString": "literal_string \"LPToken: cannot burn 0\""
                        }
                      ],
                      "id": 17086,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2881:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 17091,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2881:46:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 17092,
                  "nodeType": "ExpressionStatement",
                  "src": "2881:46:4"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 17094,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 17079,
                        "src": "2939:7:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 17095,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 17081,
                        "src": "2948:6:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 17093,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26025,
                      "src": "2933:5:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 17096,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2933:22:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 17097,
                  "nodeType": "ExpressionStatement",
                  "src": "2933:22:4"
                }
              ]
            },
            "documentation": {
              "id": 17077,
              "nodeType": "StructuredDocumentation",
              "src": "2567:235:4",
              "text": " @notice Burns the given amount of LPToken from provided account\n @dev only owner can call this burn function\n @param account address of account from which to burn token\n @param amount amount of tokens to mint"
            },
            "functionSelector": "79cc6790",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 17084,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 17083,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 25325,
                  "src": "2865:9:4"
                },
                "nodeType": "ModifierInvocation",
                "src": "2865:9:4"
              }
            ],
            "name": "burnFrom",
            "nameLocation": "2814:8:4",
            "parameters": {
              "id": 17082,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 17079,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "2831:7:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 17099,
                  "src": "2823:15:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 17078,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2823:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 17081,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2848:6:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 17099,
                  "src": "2840:14:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 17080,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2840:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2822:33:4"
            },
            "returnParameters": {
              "id": 17085,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2875:0:4"
            },
            "scope": 17131,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 17130,
            "nodeType": "FunctionDefinition",
            "src": "3281:255:4",
            "body": {
              "id": 17129,
              "nodeType": "Block",
              "src": "3413:123:4",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 17114,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 17102,
                        "src": "3446:4:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 17115,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 17104,
                        "src": "3452:2:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 17116,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 17106,
                        "src": "3456:6:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 17111,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "3419:5:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_LPToken_$17131_$",
                          "typeString": "type(contract super LPToken)"
                        }
                      },
                      "id": 17113,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_beforeTokenTransfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 26124,
                      "src": "3419:26:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 17117,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3419:44:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 17118,
                  "nodeType": "ExpressionStatement",
                  "src": "3419:44:4"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 17125,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 17120,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 17104,
                          "src": "3477:2:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "id": 17123,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -28,
                              "src": "3491:4:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_LPToken_$17131",
                                "typeString": "contract LPToken"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_LPToken_$17131",
                                "typeString": "contract LPToken"
                              }
                            ],
                            "id": 17122,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "3483:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 17121,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3483:7:4",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 17124,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3483:13:4",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "3477:19:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4c50546f6b656e3a2063616e6e6f742073656e6420746f20697473656c66",
                        "id": 17126,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3498:32:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ef142e1a2846b964b816ff083db6d21006ea5123566a1edd36cdd44bd455377f",
                          "typeString": "literal_string \"LPToken: cannot send to itself\""
                        },
                        "value": "LPToken: cannot send to itself"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ef142e1a2846b964b816ff083db6d21006ea5123566a1edd36cdd44bd455377f",
                          "typeString": "literal_string \"LPToken: cannot send to itself\""
                        }
                      ],
                      "id": 17119,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3469:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 17127,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3469:62:4",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 17128,
                  "nodeType": "ExpressionStatement",
                  "src": "3469:62:4"
                }
              ]
            },
            "baseFunctions": [
              26124
            ],
            "documentation": {
              "id": 17100,
              "nodeType": "StructuredDocumentation",
              "src": "3015:263:4",
              "text": " @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\n minting and burning. This ensures that Swap.updateUserWithdrawFees are called everytime.\n This assumes the owner is set to a Swap contract's address."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_beforeTokenTransfer",
            "nameLocation": "3290:20:4",
            "overrides": {
              "id": 17109,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 17108,
                  "name": "ERC20Upgradeable",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 26141,
                  "src": "3395:16:4"
                }
              ],
              "src": "3386:26:4"
            },
            "parameters": {
              "id": 17107,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 17102,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "3324:4:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 17130,
                  "src": "3316:12:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 17101,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3316:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 17104,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "3342:2:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 17130,
                  "src": "3334:10:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 17103,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3334:7:4",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 17106,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "3358:6:4",
                  "nodeType": "VariableDeclaration",
                  "scope": 17130,
                  "src": "3350:14:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 17105,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3350:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3310:58:4"
            },
            "returnParameters": {
              "id": 17110,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3413:0:4"
            },
            "scope": 17131,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 17000,
              "name": "ERC20Upgradeable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 26141,
              "src": "608:16:4"
            },
            "id": 17001,
            "nodeType": "InheritanceSpecifier",
            "src": "608:16:4"
          },
          {
            "baseName": {
              "id": 17002,
              "name": "OwnableUpgradeable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 25388,
              "src": "626:18:4"
            },
            "id": 17003,
            "nodeType": "InheritanceSpecifier",
            "src": "626:18:4"
          }
        ],
        "canonicalName": "LPToken",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 16999,
          "nodeType": "StructuredDocumentation",
          "src": "289:298:4",
          "text": " @title Liquidity Provider Token\n @notice This token is an ERC20 detailed token with added capability to be minted by the owner.\n It is used to represent user's shares when providing liquidity to swap contracts.\n @dev Only Swap contracts should initialize and own LPToken contracts."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          17131,
          25388,
          26141,
          26308,
          26219,
          26593,
          25530
        ],
        "name": "LPToken",
        "nameLocation": "597:7:4",
        "scope": 17132,
        "usedErrors": []
      }
    ],
    "license": "UNLICENSED"
  },
  "id": 4
}